---
name: 'setup-helm-workspace'

description: 'Check out the repo, populate the environment with useful env vars, set up Helm with needed plugins, and optionally adds the provided helm repo.'

inputs:
  helm-repo:
    description: 'Name of Helm repository to add'
    required: false
    default: "harbor"
  helm-repo-url:
    description: 'URL of Helm repository being added'
    required: false
    default: "https://harbor.infra.updatron.com/chartrepo/updater"
  helm-password:
    description: 'Password to use when connecting with the `helm-repo`'
    required: false
    default: ""
  helm-username:
    description: 'Username to use when connecting with the `helm-repo`'
    required: false
    default: ""
  helm-changelog-version:
    description: "helm-changelog version"
    required: false
    default: "0.0.1"
  helm-docs-version:
    description: "helm-docs version"
    required: false
    default: "1.9.1"

  chart-dirs:
    description: "comma-separated list of dirs to look for charts"
    required: false
    default: "charts"

  # chart-testing settings
  ct-common-args:
    description: "ct common args"
    required: false
    default: "--remote=origin --target-branch=main"
  ct-list-args:
    description: "ct list args"
    required: false
    default: ""
  ct-extra-args:
    description: "extra args to pass to all ct commands"
    required: false
    default: ""

outputs:
  changed:
    description: "Set to true if any charts have changed"
    value: ${{ steps.list-changed.outputs.changed }}

runs:
  using: "composite"
  steps:
    - name: Inject slug/short variables
      uses: Updater/github-slug-action@v3.x

    - name: Configure git user name/email
      shell: bash
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Get Date
      id: get-date
      shell: bash
      run: echo "::set-output name=week::$(/bin/date -u "+%U")"

    ## Helm
    - name: Cache helm
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/bin/helm
        key: helm-${{ runner.os }}-${{ steps.get-date.outputs.week }}
        restore-keys: |
          helm-${{ runner.os }}

    - name: Install helm
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    ## helm plugins
    - name: Get helm plugins directory
      id: helm-plugins-dir
      shell: bash
      run: echo "::set-output name=dir::$(helm env | grep HELM_PLUGINS | cut -d'=' -f2 | tr -d '\"')"

    - name: Cache helm plugins
      uses: actions/cache@v2
      id: cache-helm
      with:
        path: ${{ steps.helm-plugins-dir.outputs.dir }}
        key: helm-plugins-${{ runner.os }}-${{ hashFiles(steps.helm-plugins-dir.outputs.dir) }}
        restore-keys: |
          helm-plugins-${{ runner.os }}

    - name: Install or update cm-push helm plugin
      if: steps.cache-helm.outputs.cache-hit != 'true'
      shell: bash
      run: |
        if grep -q cm-push <(helm plugin list); then
          helm plugin update cm-push
        else
          helm plugin install https://github.com/chartmuseum/helm-push
        fi

    ## python
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    ## chart-testing
    - name: Set up chart-testing
      uses: Updater/chart-testing-action@v2.2.0

    ## helm-changelog
    - name: Cache helm-changelog
      uses: actions/cache@v2
      id: cache-helm-changelog
      env:
        cache-name: cache-helm-changelog
      with:
        path: /usr/local/bin/helm-changelog
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ steps.get-date.outputs.week }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Install helm-changelog
      if: steps.cache-helm-changelog.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -sLO https://github.com/mogensen/helm-changelog/releases/download/v${{ inputs.helm-changelog-version }}/helm-changelog_${{ inputs.helm-changelog-version }}_linux_amd64.tar.gz
        tar -xzvf helm-changelog_${{ inputs.helm-changelog-version }}_linux_amd64.tar.gz
        mv helm-changelog /usr/local/bin/
        chmod +x /usr/local/bin/helm-changelog

    ## helm-docs (readme generation)
    - name: Cache helm-docs
      uses: actions/cache@v2
      id: cache-helm-docs
      env:
        cache-name: cache-helm-docs
      with:
        path: /usr/local/bin/helm-docs
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ steps.get-date.outputs.week }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Install helm-docs
      if: steps.cache-helm-docs.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -sLO https://github.com/norwoodj/helm-docs/releases/download/v${{ inputs.helm-docs-version }}/helm-docs_${{ inputs.helm-docs-version }}_linux_amd64.tar.gz
        tar -xzvf helm-docs_${{ inputs.helm-docs-version }}_linux_amd64.tar.gz
        mv helm-docs /usr/local/bin/
        chmod +x /usr/local/bin/helm-docs

    ## readme-generator-for-helm
    - name: Checkout bitnami-labs/readme-generator-for-helm
      uses: actions/checkout@v2
      with:
        repository: 'bitnami-labs/readme-generator-for-helm'
        ref: 'main'
        path: readme-generator-for-helm

    - name: Cache readme-generator-for-helm node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('readme-generator-for-helm/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Install readme-generator-for-helm dependencies
      shell: bash
      run: cd readme-generator-for-helm && npm install

    - name: Add helm repo
      shell: bash
      run: |
        USERNAME_FLAG=""
        PASSWORD_FLAG=""

        # if repo is harbor, make sure username and password are set
        if [ "${{ inputs.helm-repo }}" = "harbor" ] ; then
          if [ -z "${{ inputs.helm-username}}" ] && [ -z "${{ inputs.helm-password }}" ]; then
            echo "ERROR: default harbor helm repo requires helm-username and helm-password to be set!" && exit 1
          fi
        fi

        # if url is specified, optionally append username/password
        if [ -n "${{ inputs.helm-repo-url}}" ]; then
          if [ -n "${{ inputs.helm-username }}" ]; then
            USERNAME_FLAG=--username='${{ inputs.helm-username }}'
          fi

          if [ -n "${{ inputs.helm-password }}" ]; then
            PASSWORD_FLAG=--password='${{ inputs.helm-password }}'
          fi

          helm repo add ${USERNAME_FLAG} ${PASSWORD_FLAG} ${{ inputs.helm-repo }} ${{ inputs.helm-repo-url }}
        else
          echo "Skipping helm repo add: helm-username and helm-password not supplied."
        fi

    - name: List changed charts
      id: list-changed
      shell: bash
      run: |
        changed=$(ct list-changed --chart-dirs ${{ inputs.chart-dirs }} ${{ inputs.ct-common-args }} ${{ inputs.ct-list-args }} ${{ inputs.ct-extra-args }})
        if [[ -n "$changed" ]]; then
          echo "::set-output name=changed::true"
          echo $changed > charts-changed.txt
        else
          echo "::set-output name=changed::false"
          touch charts-changed.txt
        fi
        echo changed=$changed
